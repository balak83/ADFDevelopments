{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DFBK1"
		},
		"LS_Destination_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_Destination'"
		},
		"LS_Import_CSV_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_Import_CSV'"
		},
		"LS_Sourrce_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_Sourrce'"
		},
		"LS_SqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_SqlServer'"
		},
		"ls_dest_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_dest'"
		},
		"blob_trigger_properties_pl_blob_trrigger_parameters_file_name": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"blob_trigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/85ad60f7-d1fb-4876-a32f-22223044717e/resourceGroups/RG_FreeTrial/providers/Microsoft.Storage/storageAccounts/source1blob1"
		},
		"tumbling_trigger_properties_pipeline_parameters_start_time": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowStartTime"
		},
		"tumbling_trigger_properties_pipeline_parameters_end_time": {
			"type": "string",
			"defaultValue": "@trigger().outputs.windowEndTime"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_Append_Variable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Append",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "input",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Marks",
							"value": {
								"value": "@variables('input')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "input",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "input",
							"value": 6
						}
					},
					{
						"name": "output",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Append",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "output",
							"value": {
								"value": "@variables('Marks')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"input": {
						"type": "Integer"
					},
					"Marks": {
						"type": "Array",
						"defaultValue": [
							1,
							2,
							3,
							4
						]
					},
					"output": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-22T06:12:45Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Filter_Sort')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_Filter_Sort",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Filter_Sort",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SQLsource": {},
									"empcsv": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-22T15:16:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Filter_Sort')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_FullLoad_fetch_schema_table_column_fromBlob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_source_csv",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat(item().source_Query,item().source_Schema,'.',item().source_Table)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"preCopyScript": {
												"value": "@{concat('TRUNCATE TABLE ',item().dest_Schema,'.',item().dest_Table)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_DataLoad_Src2",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_DataLoad_dst1",
											"type": "DatasetReference",
											"parameters": {
												"schema_Name": {
													"value": "@item().dest_Schema",
													"type": "Expression"
												},
												"table_Name": {
													"value": "@item().dest_Table",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-15T16:31:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_DataLoad_Src2')]",
				"[concat(variables('factoryId'), '/datasets/ds_DataLoad_dst1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_FullLoad_staticschema_dynamictable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "iterateandloadtables",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('table_Names')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "MoveData",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"preCopyScript": {
												"value": "@{concat('truncate table ','staging','.',item())}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_Dataload_Source",
											"type": "DatasetReference",
											"parameters": {
												"table_Name": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_Dataload_Dest",
											"type": "DatasetReference",
											"parameters": {
												"table_Name": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"table_Names": {
						"type": "Array",
						"defaultValue": [
							"tblEmp",
							"tblDept"
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-06T13:15:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Dataload_Source')]",
				"[concat(variables('factoryId'), '/datasets/ds_Dataload_Dest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Fullload_dynamicschema_dynamictable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "iterate_schema_table",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('table_Names')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Move_Data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"preCopyScript": {
												"value": "@{concat('TRUNCATE TABLE ',item().dest_Schema,'.',item().dest_Table)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_DataLoad_Src1",
											"type": "DatasetReference",
											"parameters": {
												"schema_Name": {
													"value": "@item().source_Schema",
													"type": "Expression"
												},
												"table_Name": {
													"value": "@item().source_Table",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_DataLoad_dst1",
											"type": "DatasetReference",
											"parameters": {
												"schema_Name": {
													"value": "@item().dest_Schema",
													"type": "Expression"
												},
												"table_Name": {
													"value": "@item().dest_Table",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"table_Names": {
						"type": "Array",
						"defaultValue": [
							{
								"source_Schema": "dbo",
								"source_Table": "tblEmp",
								"dest_Schema": "staging",
								"dest_Table": "tblEmp"
							},
							{
								"source_Schema": "dbo",
								"source_Table": "tblDept",
								"dest_Schema": "staging",
								"dest_Table": "tblDept"
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-15T16:31:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_DataLoad_Src1')]",
				"[concat(variables('factoryId'), '/datasets/ds_DataLoad_dst1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Fullload_dynamicschema_dynamictable_Selectedcolumn')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "iterate_schema_table",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('table_Names')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Move_Data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT ',item().source_Column,' FROM ',item().source_Schema,'.',item().source_Table)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"preCopyScript": {
												"value": "@{concat('TRUNCATE TABLE ',item().dest_Schema,'.',item().dest_Table)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_DataLoad_Src2",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_DataLoad_dst1",
											"type": "DatasetReference",
											"parameters": {
												"schema_Name": {
													"value": "@item().dest_Schema",
													"type": "Expression"
												},
												"table_Name": {
													"value": "@item().dest_Table",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"table_Names": {
						"type": "Array",
						"defaultValue": [
							{
								"source_Schema": "dbo",
								"source_Table": "tblEmp",
								"source_Column": "[Employee ID],Email,Salary",
								"dest_Schema": "staging",
								"dest_Table": "tblEmp"
							},
							{
								"source_Schema": "dbo",
								"source_Table": "tblDept",
								"source_Column": "[Employee ID],Department",
								"dest_Schema": "staging",
								"dest_Table": "tblDept"
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-15T16:31:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_DataLoad_Src2')]",
				"[concat(variables('factoryId'), '/datasets/ds_DataLoad_dst1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Log')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "StartLog",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[SavePipelineLog]",
								"storedProcedureParameters": {
									"DFName": {
										"type": "String",
										"value": {
											"value": "@pipeline().DataFactory",
											"type": "Expression"
										}
									},
									"Id": {
										"type": "Int32",
										"value": "0"
									},
									"PLName": {
										"type": "String",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"PLStatus": {
										"type": "String",
										"value": "Start"
									},
									"Runid": {
										"type": "String",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_dept",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "SuccessLog",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "exepl_areacalc",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[SavePipelineLog]",
								"storedProcedureParameters": {
									"DFName": {
										"type": "String",
										"value": {
											"value": "@pipeline().DataFactory",
											"type": "Expression"
										}
									},
									"Id": {
										"type": "Int32",
										"value": {
											"value": "@int(activity('StartLog').output.value[0].Id)",
											"type": "Expression"
										}
									},
									"PLName": {
										"type": "String",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"PLStatus": {
										"type": "String",
										"value": "Success"
									},
									"Runid": {
										"type": "String",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_dept",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FailureLog",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "exepl_areacalc",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderStoredProcedureName": "[[dbo].[SavePipelineLog]",
								"storedProcedureParameters": {
									"DFName": {
										"type": "String",
										"value": {
											"value": "@pipeline().DataFactory",
											"type": "Expression"
										}
									},
									"ErrorMessage": {
										"type": "String",
										"value": {
											"value": "@activity('exepl_areacalc').Error.message",
											"type": "Expression"
										}
									},
									"Id": {
										"type": "Int32",
										"value": {
											"value": "@int(activity('StartLog').output.value[0].Id)",
											"type": "Expression"
										}
									},
									"PLName": {
										"type": "String",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"PLStatus": {
										"type": "String",
										"value": "Failed"
									},
									"Runid": {
										"type": "String",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_dept",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "exepl_areacalc",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "StartLog",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_areacalculation",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-05T17:05:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_dept')]",
				"[concat(variables('factoryId'), '/pipelines/pl_areacalculation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_SCDType1_CSV_to_Staging_then_target')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_csv_to_staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_uincrement_load_CSV_to_SQL",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CSVSource": {},
									"csvtostaging": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "df_staging_to_target",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "df_csv_to_staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_SCD_Type1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empstaging": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-16T09:33:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_uincrement_load_CSV_to_SQL')]",
				"[concat(variables('factoryId'), '/dataflows/df_SCD_Type1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_SCD_Type2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SCD_Type2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCD_Type2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source": {},
									"lookup": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-16T18:31:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCD_Type2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_Variable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "(a+b)2 = a2+b2+2ab",
				"activities": [
					{
						"name": "var b",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "b",
							"value": 10
						}
					},
					{
						"name": "Var a",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "a",
							"value": 5
						}
					},
					{
						"name": "var c",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Var a",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "var b",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "c",
							"value": {
								"value": "@add(mul(variables('a'),variables('a')), mul(variables('b'),variables('b')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "var d",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Var a",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "var b",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "d",
							"value": {
								"value": "@mul(2,mul(variables('a'),variables('b')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "var result",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "var c",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "var d",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "result",
							"value": {
								"value": "@add(variables('c'),variables('d'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "var result1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "var b",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Var a",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "result",
							"value": {
								"value": "@add(add(mul(variables('a'),variables('a')), mul(variables('b'),variables('b'))),mul(2,mul(variables('a'),variables('b'))))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"a": {
						"type": "Integer"
					},
					"b": {
						"type": "Integer"
					},
					"c": {
						"type": "Integer"
					},
					"d": {
						"type": "Integer"
					},
					"result": {
						"type": "Integer"
					},
					"result1": {
						"type": "Integer"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-21T18:00:25Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_areacalculation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "breth",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "breth",
							"value": 5
						}
					},
					{
						"name": "length",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "length",
							"value": "b"
						}
					},
					{
						"name": "area",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "breth",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "length",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "area",
							"value": {
								"value": "@mul(variables('breth'),variables('length'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"breth": {
						"type": "Integer",
						"defaultValue": 6
					},
					"length": {
						"type": "Integer",
						"defaultValue": 5
					},
					"area": {
						"type": "Integer"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-05T17:05:25Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_blob_trrigger')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "blob trigger",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_blob_source",
								"type": "DatasetReference",
								"parameters": {
									"file_name_ds": {
										"value": "@pipeline().parameters.file_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob_destination",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-19T19:47:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_blob_source')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob_destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_source_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_destination_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-22T17:16:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_destination_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_csv_schedule_trigger')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_source_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_destination_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-22T17:16:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_destination_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_csv_tumbling_trrigger')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Tumbling Coopy",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@pipeline().parameters.start_time",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@pipeline().parameters.end_time",
										"type": "Expression"
									}
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_tumbling_binary_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_tumbling_binary_dest",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"start_time": {
						"type": "string"
					},
					"end_time": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-20T17:58:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_tumbling_binary_source')]",
				"[concat(variables('factoryId'), '/datasets/ds_tumbling_binary_dest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_csv_to_sql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CSV to SQL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_source_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_destination_sql",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-19T08:56:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_destination_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_derievedcolumn_with_select')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_derievedcol_select",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_derievedcol_select",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sqlsource": {},
									"derievedcolumnjson": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-23T13:07:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_derievedcol_select')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_emailnotification')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Email_notification",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-12.centralindia.logic.azure.com:443/workflows/6565baf82d5141a393399f268d638519/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=VPU3YAK7qG6Mt0TS1ohxU8BlOg7rmAzqGUwa5tOIAYQ",
							"method": "POST",
							"headers": {},
							"body": {
								"To": "saranya.vsp@gmail.com",
								"Subject": "Email notification from ADF",
								"Body": "This is email notification from Azure Data Factory"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-06T17:09:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_foreach_file_copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata foreach",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_foreach_file_copy",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachcopy",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata foreach",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata foreach').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy csv",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_foreach_file_copy",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_dest",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-24T10:12:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_foreach_file_copy')]",
				"[concat(variables('factoryId'), '/datasets/ds_dest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_increment_load_SCD_Type1_using_SP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sp_SCD_Type1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[MOVEDATA_SCDTYPE1]"
						},
						"linkedServiceName": {
							"referenceName": "LS_SqlServer",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-15T16:33:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_increment_load_using_dataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_SCDType1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_SCD_Type1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empstaging": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-15T16:50:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_SCD_Type1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_lookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup CSV",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_source_csv",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Lookup SQL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_destination_sql",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-22T17:16:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_source_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_destination_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_metadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata CSV",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_Metadata_CSV",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"itemName",
								"structure",
								"columnCount"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Get Metadata Container",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_metadata_container",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems",
								"itemName",
								"itemType"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Get Metadata SQL",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_destination_sql",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"columnCount",
								"structure"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-22T06:29:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Metadata_CSV')]",
				"[concat(variables('factoryId'), '/datasets/ds_metadata_container')]",
				"[concat(variables('factoryId'), '/datasets/ds_destination_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_parameterised_csv_to_sql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "copy_param_csv_to_sql",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_xlx_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_param_sql_dest",
								"type": "DatasetReference",
								"parameters": {
									"ds_dest_table": {
										"value": "@pipeline().parameters.dest_table",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"source_csv": {
						"type": "string"
					},
					"dest_table": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-22T17:45:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_xlx_source')]",
				"[concat(variables('factoryId'), '/datasets/ds_param_sql_dest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_sql_join')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_sql_join",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_sql_join",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tblemp": {},
									"tblDept": {},
									"jsonoutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-08-22T18:04:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_sql_join')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DataLoad_Src1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SqlServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_Name": {
						"type": "string"
					},
					"table_Name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_Name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DataLoad_Src2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SqlServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DataLoad_dst1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SqlServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_Name": {
						"type": "string"
					},
					"table_Name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_Name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Dataload_Dest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SqlServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_Name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "staging",
					"table": {
						"value": "@dataset().table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Dataload_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SqlServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table_Name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().table_Name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Metadata_CSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Sourrce",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Employee.csv",
						"container": "source"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Employee ID",
						"type": "String"
					},
					{
						"name": "Full Name",
						"type": "String"
					},
					{
						"name": "Job Title",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Sourrce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SCDT2_Src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SqlServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "empId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastName",
						"type": "varchar"
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "Email",
						"type": "varchar"
					},
					{
						"name": "Address",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tblEmployee_SCDT2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Destination",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "destination"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Employee ID",
						"type": "String"
					},
					{
						"name": "Full Name",
						"type": "String"
					},
					{
						"name": "Job Title",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Sourrce",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"file_name_ds": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file_name_ds",
							"type": "Expression"
						},
						"container": "source"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Employee ID",
						"type": "String"
					},
					{
						"name": "Full Name",
						"type": "String"
					},
					{
						"name": "Job Title",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Sourrce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_csv_emp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Import_CSV",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "tblEmployee.csv",
						"container": "source"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empId",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "Address",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Import_CSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dept')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SqlServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Employee ID",
						"type": "varchar"
					},
					{
						"name": "Department",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tblDept"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_dest",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "dest"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_dest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_destination_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Destination",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "destination"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_destination_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SqlServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Employee ID",
						"type": "varchar"
					},
					{
						"name": "Full Name",
						"type": "varchar"
					},
					{
						"name": "Job Title",
						"type": "varchar"
					},
					{
						"name": "Department",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Employee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_employee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SqlServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Employee ID",
						"type": "varchar"
					},
					{
						"name": "Email",
						"type": "varchar"
					},
					{
						"name": "Salary",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tblEmp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_foreach_file_copy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Sourrce",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "source"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Sourrce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_increment_load_emp_dest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SqlServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "empId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastName",
						"type": "varchar"
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "Email",
						"type": "varchar"
					},
					{
						"name": "Address",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tblEmployee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_increment_load_emp_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SqlServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "empId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastName",
						"type": "varchar"
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "Email",
						"type": "varchar"
					},
					{
						"name": "Address",
						"type": "varchar"
					},
					{
						"name": "City",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "staging",
					"table": "tblEmployee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_json_dest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Destination",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "destination"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_metadata_container')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Sourrce",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "source"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Sourrce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_param_csv_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Sourrce",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_source_csv": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().ds_source_csv",
							"type": "Expression"
						},
						"container": "source"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Employee ID",
						"type": "String"
					},
					{
						"name": "Full Name",
						"type": "String"
					},
					{
						"name": "Job Title",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Sourrce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_param_sql_dest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SqlServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_dest_table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tblDept"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_source_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Import_CSV",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Import_Data_Table_List.csv",
						"container": "source"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PK\u0003\u0004\u0014\u0000\u0006\u0000\b\u0000\u0000\u0000!\u0000\u0012\u0018��d\u0001\u0000\u0000\u0018\u0005\u0000\u0000\u0013\u0000\b\u0002[Content_Types].xml �\u0004\u0002(�\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ĕ�n�0\f���\u000eU�S\u001b�0M\u0013���\u001c7��\u0007�\u001aC#�$�",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Import_CSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_tumbling_binary_dest')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Destination",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "destination"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_tumbling_binary_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Sourrce",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "source"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Sourrce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_xlx_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Sourrce",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Emp_Dept",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Emp_Dept.xlsx",
						"container": "source"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Employee ID",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Sourrce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Destination')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_Destination_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Import_CSV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_Import_CSV_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Sourrce')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_Sourrce_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('LS_SqlServer_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_dest')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_dest_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_blob_trrigger",
							"type": "PipelineReference"
						},
						"parameters": {
							"file_name": "[parameters('blob_trigger_properties_pl_blob_trrigger_parameters_file_name')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/source/blobs/",
					"blobPathEndsWith": ".csv",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('blob_trigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_blob_trrigger')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/schedule_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_copy_csv_schedule_trigger",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 2,
						"startTime": "2023-08-19T12:31:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_copy_csv_schedule_trigger')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tumbling_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pl_copy_csv_tumbling_trrigger",
						"type": "PipelineReference"
					},
					"parameters": {
						"start_time": "[parameters('tumbling_trigger_properties_pipeline_parameters_start_time')]",
						"end_time": "[parameters('tumbling_trigger_properties_pipeline_parameters_end_time')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2023-08-20T16:16:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_copy_csv_tumbling_trrigger')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD_Type2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_csv_emp",
								"type": "DatasetReference"
							},
							"name": "source"
						},
						{
							"dataset": {
								"referenceName": "ds_SCDT2_Src",
								"type": "DatasetReference"
							},
							"name": "lookup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_SCDT2_Src",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ds_SCDT2_Src",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "insert"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "Update"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select2"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empId as integer,",
						"          LastName as string,",
						"          FirstName as string,",
						"          Email as string,",
						"          Address as string,",
						"          City as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source",
						"source(output(",
						"          empId as integer,",
						"          LastName as string,",
						"          FirstName as string,",
						"          Email as string,",
						"          Address as string,",
						"          City as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select * from [dbo].[tblEmployee_SCDT2] where IsActive = 1',",
						"     format: 'query') ~> lookup",
						"source, lookup lookup(source@empId == lookup@empId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 filter(isNull(lookup@empId) || (source@LastName!=lookup@LastName) || (source@FirstName!=lookup@FirstName) ||(source@Email!=lookup@Email) || (source@Address!=lookup@Address) ||(source@City!=lookup@City)) ~> insert",
						"insert derive(IsActive = 1) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          empId = source@empId,",
						"          LastName = source@LastName,",
						"          FirstName = source@FirstName,",
						"          Email = source@Email,",
						"          Address = source@Address,",
						"          City = source@City,",
						"          IsActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"lookup1 filter((!isNull(lookup@empId)) && ((source@LastName!=lookup@LastName) || (source@FirstName!=lookup@FirstName) || (source@Email!=lookup@Email) || (source@Address!=lookup@Address) || (source@City!=lookup@City))) ~> Update",
						"Update derive(IsActive = 0) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          empId = lookup@empId,",
						"          LastName = lookup@LastName,",
						"          FirstName = lookup@FirstName,",
						"          Email = lookup@Email,",
						"          Address = lookup@Address,",
						"          City = lookup@City,",
						"          IsActive",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 alterRow(updateIf(1==1)) ~> alterRow1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          empId as integer,",
						"          LastName as string,",
						"          FirstName as string,",
						"          Email as string,",
						"          Address as string,",
						"          City as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          empId as integer,",
						"          LastName as string,",
						"          FirstName as string,",
						"          Email as string,",
						"          Address as string,",
						"          City as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['empId','LastName'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_csv_emp')]",
				"[concat(variables('factoryId'), '/datasets/ds_SCDT2_Src')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Filter_Sort')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_destination_sql",
								"type": "DatasetReference"
							},
							"name": "SQLsource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_destination_csv",
								"type": "DatasetReference"
							},
							"name": "empcsv"
						}
					],
					"transformations": [
						{
							"name": "filterempbydept"
						},
						{
							"name": "sortemp"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Employee ID} as string,",
						"          {Full Name} as string,",
						"          {Job Title} as string,",
						"          Department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SQLsource",
						"SQLsource filter(Department=='IT',",
						"     partitionBy('hash', 1)) ~> filterempbydept",
						"filterempbydept sort(asc({Full Name}, true)) ~> sortemp",
						"sortemp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> empcsv"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_destination_sql')]",
				"[concat(variables('factoryId'), '/datasets/ds_destination_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SCD_Type1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_increment_load_emp_src",
								"type": "DatasetReference"
							},
							"name": "empstaging"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_increment_load_emp_dest",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empId as integer,",
						"          LastName as string,",
						"          FirstName as string,",
						"          Email as string,",
						"          Address as string,",
						"          City as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> empstaging",
						"empstaging alterRow(upsertIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          empId as integer,",
						"          LastName as string,",
						"          FirstName as string,",
						"          Email as string,",
						"          Address as string,",
						"          City as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['empId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_increment_load_emp_src')]",
				"[concat(variables('factoryId'), '/datasets/ds_increment_load_emp_dest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_derievedcol_select')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_employee",
								"type": "DatasetReference"
							},
							"name": "sqlsource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_json_dest",
								"type": "DatasetReference"
							},
							"name": "derievedcolumnjson"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Employee ID} as string,",
						"          Email as string,",
						"          Salary as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     partitionBy('hash', 1)) ~> sqlsource",
						"sqlsource derive(Email = upper(Email),",
						"          salary_deduction = 5000,",
						"          salary_after_deduction = Salary-5000) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          {Employee ID},",
						"          Email,",
						"          Salary,",
						"          salary_after_deduction",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> derievedcolumnjson"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_employee')]",
				"[concat(variables('factoryId'), '/datasets/ds_json_dest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_sql_join')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_employee",
								"type": "DatasetReference"
							},
							"name": "tblemp"
						},
						{
							"dataset": {
								"referenceName": "ds_dept",
								"type": "DatasetReference"
							},
							"name": "tblDept"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_json_dest",
								"type": "DatasetReference"
							},
							"name": "jsonoutput"
						}
					],
					"transformations": [
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Employee ID} as string,",
						"          Email as string,",
						"          Salary as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tblemp",
						"source(output(",
						"          {Employee ID} as string,",
						"          Department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tblDept",
						"tblemp, tblDept join(tblemp@{Employee ID} == tblDept@{Employee ID},",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> jsonoutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_employee')]",
				"[concat(variables('factoryId'), '/datasets/ds_dept')]",
				"[concat(variables('factoryId'), '/datasets/ds_json_dest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_uincrement_load_CSV_to_SQL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_csv_emp",
								"type": "DatasetReference"
							},
							"name": "CSVSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_increment_load_emp_src",
								"type": "DatasetReference"
							},
							"name": "csvtostaging"
						}
					],
					"transformations": [
						{
							"name": "alterRowcsv"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empId as integer,",
						"          LastName as string,",
						"          FirstName as string,",
						"          Email as string,",
						"          Address as string,",
						"          City as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CSVSource",
						"CSVSource alterRow(upsertIf(1==1)) ~> alterRowcsv",
						"alterRowcsv sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          empId as integer,",
						"          LastName as string,",
						"          FirstName as string,",
						"          Email as string,",
						"          Address as string,",
						"          City as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['empId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empId,",
						"          LastName,",
						"          FirstName,",
						"          Email,",
						"          Address,",
						"          City",
						"     )) ~> csvtostaging"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_csv_emp')]",
				"[concat(variables('factoryId'), '/datasets/ds_increment_load_emp_src')]"
			]
		}
	]
}